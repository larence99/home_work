#include <iostream>

class MyString {
private:
	char * str;
	int len;
public:
	MyString() : str('\0') {}
	MyString(char*  s) {
		str = s;
	}
	void setLen(int len1) {
		len = len1;
	}
	int getLen() {
		return len;
	}
	char* getString() {
		
	}
	~MyString() {};
	void append(MyString);
	MyString SubString(int, int);
	void split(char*);

};

void MyString::append(MyString s) {
	int common = len + s.getLen();
	char* tot = new char[common];

	for (int i = 0; i < len+1; i++) {
		tot[i] = str[i];
	}
	
	for (int i = len+1; i < s.len; i++) {
		tot[i] = s.str[i];
	}
	
	for (int i = 0; i < common; i++) {
		std::cout << tot[i];
	}
}

MyString MyString::SubString(int first, int second) {
	char* tot = new char(second);

	for (int i = first; i < first + second; i++) {
		tot[i] = str[i];
	}
	MyString total(tot);

	return total;
}

void MyString::split(char* sym) {
	int count = 0;
	for (int i = 0; i < len; i++) {
		if (str[i] == *sym) {
			char* tmp = new char[i]; 
			for (int j = count; j < i; j++) {
				tmp[j] = str[i];
			}
			for (int c = count; c < i; c++) {
				std::cout << str[c];
			}
			count = i + 1;
		
		}
	}
}



int main() {

	return 0;
}
